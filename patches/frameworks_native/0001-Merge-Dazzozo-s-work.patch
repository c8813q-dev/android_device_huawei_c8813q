From 640375cff8a4252b08bf6b07c51701cefb169c55 Mon Sep 17 00:00:00 2001
From: dianlujitao <dianlujitao@gmail.com>
Date: Mon, 31 Mar 2014 13:57:05 +0800
Subject: [PATCH] Merge Dazzozo's work

Change-Id: Ic9a60007d548f492b5ad1b5487e1ecd0914b301c
---
 include/gui/GLConsumer.h                           |    6 ++++
 libs/gui/Android.mk                                |    7 +++++
 services/surfaceflinger/Android.mk                 |    4 +++
 services/surfaceflinger/Layer.cpp                  |    4 +++
 .../RenderEngine/GLES11RenderEngine.cpp            |    6 ++++
 services/surfaceflinger/SurfaceFlingerConsumer.cpp |   32 ++++++++++++++++++++
 services/surfaceflinger/SurfaceFlingerConsumer.h   |    7 +++++
 7 files changed, 66 insertions(+)

diff --git a/include/gui/GLConsumer.h b/include/gui/GLConsumer.h
index d5d9c5b..2aea54a 100644
--- a/include/gui/GLConsumer.h
+++ b/include/gui/GLConsumer.h
@@ -375,7 +375,13 @@ private:
     // glCopyTexSubImage to read from the texture.  This is a hack to work
     // around a GL driver limitation on the number of FBO attachments, which the
     // browser's tile cache exceeds.
+#ifdef DECIDE_TEXTURE_TARGET
+protected:
+    uint32_t mTexTarget;
+private:
+#else
     const uint32_t mTexTarget;
+#endif
 
     // EGLSlot contains the information and object references that
     // GLConsumer maintains about a BufferQueue buffer slot.
diff --git a/libs/gui/Android.mk b/libs/gui/Android.mk
index 80746e4..466fb90 100644
--- a/libs/gui/Android.mk
+++ b/libs/gui/Android.mk
@@ -67,10 +67,17 @@ endif
 ifeq ($(TARGET_BOARD_PLATFORM), tegra3)
 	LOCAL_CFLAGS += -DDONT_USE_FENCE_SYNC
 endif
+ifeq ($(TARGET_DOESNT_USE_FENCE_SYNC), true)
+	LOCAL_CFLAGS += -DDONT_USE_FENCE_SYNC
+endif
 ifeq ($(TARGET_TOROPLUS_RADIO), true)
 	LOCAL_CFLAGS += -DTOROPLUS_RADIO
 endif
 
+ifeq ($(BOARD_ADRENO_DECIDE_TEXTURE_TARGET),true)
+    LOCAL_CFLAGS += -DDECIDE_TEXTURE_TARGET
+endif
+
 include $(BUILD_SHARED_LIBRARY)
 
 ifeq (,$(ONE_SHOT_MAKEFILE))
diff --git a/services/surfaceflinger/Android.mk b/services/surfaceflinger/Android.mk
index a38ef7a..7fc8a62 100644
--- a/services/surfaceflinger/Android.mk
+++ b/services/surfaceflinger/Android.mk
@@ -84,6 +84,10 @@ else
     LOCAL_CFLAGS += -DPRESENT_TIME_OFFSET_FROM_VSYNC_NS=0
 endif
 
+ifeq ($(BOARD_ADRENO_DECIDE_TEXTURE_TARGET),true)
+    LOCAL_CFLAGS += -DDECIDE_TEXTURE_TARGET
+endif
+
 LOCAL_CFLAGS += -fvisibility=hidden
 
 LOCAL_SHARED_LIBRARIES := \
diff --git a/services/surfaceflinger/Layer.cpp b/services/surfaceflinger/Layer.cpp
index 56b1b1d..3c2b39d 100644
--- a/services/surfaceflinger/Layer.cpp
+++ b/services/surfaceflinger/Layer.cpp
@@ -1102,7 +1102,11 @@ Region Layer::latchBuffer(bool& recomputeVisibleRegions)
 
         Reject r(mDrawingState, getCurrentState(), recomputeVisibleRegions);
 
+#ifdef DECIDE_TEXTURE_TARGET
+        status_t updateResult = mSurfaceFlingerConsumer->updateTexImage(&r, &mTexture);
+#else
         status_t updateResult = mSurfaceFlingerConsumer->updateTexImage(&r);
+#endif
         if (updateResult == BufferQueue::PRESENT_LATER) {
             // Producer doesn't want buffer to be displayed yet.  Signal a
             // layer update so we check again at the next opportunity.
diff --git a/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp b/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp
index da69965..31b3dc7 100644
--- a/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp
+++ b/services/surfaceflinger/RenderEngine/GLES11RenderEngine.cpp
@@ -162,8 +162,14 @@ void GLES11RenderEngine::setupLayerTexturing(const Texture& texture) {
     glMatrixMode(GL_TEXTURE);
     glLoadMatrixf(texture.getMatrix().asArray());
     glMatrixMode(GL_MODELVIEW);
+#ifdef DECIDE_TEXTURE_TARGET
+    glDisable((target == Texture::TEXTURE_2D) ?
+            GL_TEXTURE_EXTERNAL_OES : GL_TEXTURE_2D);
+    glEnable(target);
+#else
     glDisable(GL_TEXTURE_2D);
     glEnable(GL_TEXTURE_EXTERNAL_OES);
+#endif
 }
 
 void GLES11RenderEngine::setupLayerBlackedOut() {
diff --git a/services/surfaceflinger/SurfaceFlingerConsumer.cpp b/services/surfaceflinger/SurfaceFlingerConsumer.cpp
index 6dc093e..4655239 100644
--- a/services/surfaceflinger/SurfaceFlingerConsumer.cpp
+++ b/services/surfaceflinger/SurfaceFlingerConsumer.cpp
@@ -24,12 +24,22 @@
 #include <utils/Trace.h>
 #include <utils/Errors.h>
 
+#ifdef DECIDE_TEXTURE_TARGET
+#include <GLES2/gl2.h>
+#include <GLES2/gl2ext.h>
+#endif
+
 namespace android {
 
 // ---------------------------------------------------------------------------
 
+#ifdef DECIDE_TEXTURE_TARGET
+status_t SurfaceFlingerConsumer::updateTexImage(BufferRejecter* rejecter, Texture* mTexture)
+{
+#else
 status_t SurfaceFlingerConsumer::updateTexImage(BufferRejecter* rejecter)
 {
+#endif
     ATRACE_CALL();
     ALOGV("updateTexImage");
     Mutex::Autolock lock(mMutex);
@@ -73,6 +83,28 @@ status_t SurfaceFlingerConsumer::updateTexImage(BufferRejecter* rejecter)
         return NO_ERROR;
     }
 
+#ifdef DECIDE_TEXTURE_TARGET
+    // GPU is not efficient in handling GL_TEXTURE_EXTERNAL_OES
+    // texture target. Depending on the image format, decide,
+    // the texture target to be used
+    if (mTexture) {
+        switch (mSlots[buf].mGraphicBuffer->format) {
+            case HAL_PIXEL_FORMAT_RGBA_8888:
+            case HAL_PIXEL_FORMAT_RGBX_8888:
+            case HAL_PIXEL_FORMAT_RGB_888:
+            case HAL_PIXEL_FORMAT_RGB_565:
+            case HAL_PIXEL_FORMAT_BGRA_8888:
+                mTexture->init(Texture::TEXTURE_2D, mTexture->getTextureName());
+                mTexTarget = GL_TEXTURE_2D;
+                break;
+            default:
+                mTexture->init(Texture::TEXTURE_EXTERNAL, mTexture->getTextureName());
+                mTexTarget = GL_TEXTURE_EXTERNAL_OES;
+                break;
+        }
+    }
+#endif
+
     // Release the previous buffer.
     err = updateAndReleaseLocked(item);
     if (err != NO_ERROR) {
diff --git a/services/surfaceflinger/SurfaceFlingerConsumer.h b/services/surfaceflinger/SurfaceFlingerConsumer.h
index 688ad32..a7ce475 100644
--- a/services/surfaceflinger/SurfaceFlingerConsumer.h
+++ b/services/surfaceflinger/SurfaceFlingerConsumer.h
@@ -18,6 +18,9 @@
 #define ANDROID_SURFACEFLINGERCONSUMER_H
 
 #include <gui/GLConsumer.h>
+#ifdef DECIDE_TEXTURE_TARGET
+#include "RenderEngine/Texture.h"
+#endif
 
 namespace android {
 // ----------------------------------------------------------------------------
@@ -46,7 +49,11 @@ public:
     // reject the newly acquired buffer.  Unlike the GLConsumer version,
     // this does not guarantee that the buffer has been bound to the GL
     // texture.
+#ifdef DECIDE_TEXTURE_TARGET
+    status_t updateTexImage(BufferRejecter* rejecter, Texture* mTexture = 0);
+#else
     status_t updateTexImage(BufferRejecter* rejecter);
+#endif
 
     // See GLConsumer::bindTextureImageLocked().
     status_t bindTextureImage();
-- 
1.7.9.5

